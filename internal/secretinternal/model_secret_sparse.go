/*
 * Centrify Vault REST API
 *
 * Vault REST API specification 
 *
 * API version: 1.0
 * Contact: support@centrify.com
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package secretinternal

import (
	"encoding/json"
)

// SecretSparse struct for SecretSparse
type SecretSparse struct {
	// Unique ID, generated upon creation
	Id string `json:"id"`
	// Names of secrets may contain a alphanumeric characters separated by / to indicate folder membership. Vaulting a bag or text secret within folders will implicitely create the folders.
	Name string `json:"name"`
	AdditionalProperties map[string]interface{}
}

type _SecretSparse SecretSparse

// NewSecretSparse instantiates a new SecretSparse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSecretSparse(id string, name string) *SecretSparse {
	this := SecretSparse{}
	this.Id = id
	this.Name = name
	return &this
}

// NewSecretSparseWithDefaults instantiates a new SecretSparse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSecretSparseWithDefaults() *SecretSparse {
	this := SecretSparse{}
	return &this
}

// GetId returns the Id field value
func (o *SecretSparse) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *SecretSparse) GetIdOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *SecretSparse) SetId(v string) {
	o.Id = v
}

// GetName returns the Name field value
func (o *SecretSparse) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *SecretSparse) GetNameOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *SecretSparse) SetName(v string) {
	o.Name = v
}

func (o SecretSparse) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["id"] = o.Id
	}
	if true {
		toSerialize["name"] = o.Name
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return json.Marshal(toSerialize)
}

func (o *SecretSparse) UnmarshalJSON(bytes []byte) (err error) {
	varSecretSparse := _SecretSparse{}

	if err = json.Unmarshal(bytes, &varSecretSparse); err == nil {
		*o = SecretSparse(varSecretSparse)
	}

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(bytes, &additionalProperties); err == nil {
		delete(additionalProperties, "id")
		delete(additionalProperties, "name")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableSecretSparse struct {
	value *SecretSparse
	isSet bool
}

func (v NullableSecretSparse) Get() *SecretSparse {
	return v.value
}

func (v *NullableSecretSparse) Set(val *SecretSparse) {
	v.value = val
	v.isSet = true
}

func (v NullableSecretSparse) IsSet() bool {
	return v.isSet
}

func (v *NullableSecretSparse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSecretSparse(val *SecretSparse) *NullableSecretSparse {
	return &NullableSecretSparse{value: val, isSet: true}
}

func (v NullableSecretSparse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSecretSparse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


