/*
 * Centrify Vault REST API
 *
 * Vault REST API specification 
 *
 * API version: 1.0
 * Contact: support@centrify.com
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package secretinternal

import (
	"encoding/json"
)

// SecretWritable struct for SecretWritable
type SecretWritable struct {
	Type Secrettypes `json:"type"`
	// Names of secrets may contain a alphanumeric characters separated by / to indicate folder membership. Vaulting a bag or text secret within folders will implicitely create the folders.
	Name string `json:"name"`
	AdditionalProperties map[string]interface{}
}

type _SecretWritable SecretWritable

// NewSecretWritable instantiates a new SecretWritable object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSecretWritable(type_ Secrettypes, name string) *SecretWritable {
	this := SecretWritable{}
	this.Type = type_
	this.Name = name
	return &this
}

// NewSecretWritableWithDefaults instantiates a new SecretWritable object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSecretWritableWithDefaults() *SecretWritable {
	this := SecretWritable{}
	return &this
}

// GetType returns the Type field value
func (o *SecretWritable) GetType() Secrettypes {
	if o == nil {
		var ret Secrettypes
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *SecretWritable) GetTypeOk() (*Secrettypes, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *SecretWritable) SetType(v Secrettypes) {
	o.Type = v
}

// GetName returns the Name field value
func (o *SecretWritable) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *SecretWritable) GetNameOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *SecretWritable) SetName(v string) {
	o.Name = v
}

func (o SecretWritable) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["type"] = o.Type
	}
	if true {
		toSerialize["name"] = o.Name
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return json.Marshal(toSerialize)
}

func (o *SecretWritable) UnmarshalJSON(bytes []byte) (err error) {
	varSecretWritable := _SecretWritable{}

	if err = json.Unmarshal(bytes, &varSecretWritable); err == nil {
		*o = SecretWritable(varSecretWritable)
	}

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(bytes, &additionalProperties); err == nil {
		delete(additionalProperties, "type")
		delete(additionalProperties, "name")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableSecretWritable struct {
	value *SecretWritable
	isSet bool
}

func (v NullableSecretWritable) Get() *SecretWritable {
	return v.value
}

func (v *NullableSecretWritable) Set(val *SecretWritable) {
	v.value = val
	v.isSet = true
}

func (v NullableSecretWritable) IsSet() bool {
	return v.isSet
}

func (v *NullableSecretWritable) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSecretWritable(val *SecretWritable) *NullableSecretWritable {
	return &NullableSecretWritable{value: val, isSet: true}
}

func (v NullableSecretWritable) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSecretWritable) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


