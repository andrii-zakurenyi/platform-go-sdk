/*
 * Centrify Vault REST API
 *
 * Vault REST API specification 
 *
 * API version: 1.0
 * Contact: support@centrify.com
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package secretinternal

import (
	"encoding/json"
)

// SecretList struct for SecretList
type SecretList struct {
	Items []SecretSparse `json:"items"`
	// What kind of resource does this list contain?
	Object string `json:"object"`
	// Url of next page of items in list.
	NextUrl NullableString `json:"next_url"`
	// Url of previous page of items in list.
	PreviousUrl NullableString `json:"previous_url"`
	AdditionalProperties map[string]interface{}
}

type _SecretList SecretList

// NewSecretList instantiates a new SecretList object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSecretList(items []SecretSparse, object string, nextUrl NullableString, previousUrl NullableString) *SecretList {
	this := SecretList{}
	this.Items = items
	this.Object = object
	this.NextUrl = nextUrl
	this.PreviousUrl = previousUrl
	return &this
}

// NewSecretListWithDefaults instantiates a new SecretList object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSecretListWithDefaults() *SecretList {
	this := SecretList{}
	return &this
}

// GetItems returns the Items field value
func (o *SecretList) GetItems() []SecretSparse {
	if o == nil {
		var ret []SecretSparse
		return ret
	}

	return o.Items
}

// GetItemsOk returns a tuple with the Items field value
// and a boolean to check if the value has been set.
func (o *SecretList) GetItemsOk() (*[]SecretSparse, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Items, true
}

// SetItems sets field value
func (o *SecretList) SetItems(v []SecretSparse) {
	o.Items = v
}

// GetObject returns the Object field value
func (o *SecretList) GetObject() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Object
}

// GetObjectOk returns a tuple with the Object field value
// and a boolean to check if the value has been set.
func (o *SecretList) GetObjectOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Object, true
}

// SetObject sets field value
func (o *SecretList) SetObject(v string) {
	o.Object = v
}

// GetNextUrl returns the NextUrl field value
// If the value is explicit nil, the zero value for string will be returned
func (o *SecretList) GetNextUrl() string {
	if o == nil || o.NextUrl.Get() == nil {
		var ret string
		return ret
	}

	return *o.NextUrl.Get()
}

// GetNextUrlOk returns a tuple with the NextUrl field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *SecretList) GetNextUrlOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.NextUrl.Get(), o.NextUrl.IsSet()
}

// SetNextUrl sets field value
func (o *SecretList) SetNextUrl(v string) {
	o.NextUrl.Set(&v)
}

// GetPreviousUrl returns the PreviousUrl field value
// If the value is explicit nil, the zero value for string will be returned
func (o *SecretList) GetPreviousUrl() string {
	if o == nil || o.PreviousUrl.Get() == nil {
		var ret string
		return ret
	}

	return *o.PreviousUrl.Get()
}

// GetPreviousUrlOk returns a tuple with the PreviousUrl field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *SecretList) GetPreviousUrlOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.PreviousUrl.Get(), o.PreviousUrl.IsSet()
}

// SetPreviousUrl sets field value
func (o *SecretList) SetPreviousUrl(v string) {
	o.PreviousUrl.Set(&v)
}

func (o SecretList) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["items"] = o.Items
	}
	if true {
		toSerialize["object"] = o.Object
	}
	if true {
		toSerialize["next_url"] = o.NextUrl.Get()
	}
	if true {
		toSerialize["previous_url"] = o.PreviousUrl.Get()
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return json.Marshal(toSerialize)
}

func (o *SecretList) UnmarshalJSON(bytes []byte) (err error) {
	varSecretList := _SecretList{}

	if err = json.Unmarshal(bytes, &varSecretList); err == nil {
		*o = SecretList(varSecretList)
	}

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(bytes, &additionalProperties); err == nil {
		delete(additionalProperties, "items")
		delete(additionalProperties, "object")
		delete(additionalProperties, "next_url")
		delete(additionalProperties, "previous_url")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableSecretList struct {
	value *SecretList
	isSet bool
}

func (v NullableSecretList) Get() *SecretList {
	return v.value
}

func (v *NullableSecretList) Set(val *SecretList) {
	v.value = val
	v.isSet = true
}

func (v NullableSecretList) IsSet() bool {
	return v.isSet
}

func (v *NullableSecretList) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSecretList(val *SecretList) *NullableSecretList {
	return &NullableSecretList{value: val, isSet: true}
}

func (v NullableSecretList) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSecretList) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


