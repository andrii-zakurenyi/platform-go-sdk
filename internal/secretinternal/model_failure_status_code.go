/*
 * Centrify Vault REST API
 *
 * Vault REST API specification 
 *
 * API version: 1.0
 * Contact: support@centrify.com
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package secretinternal

import (
	"encoding/json"
	"fmt"
)

// FailureStatusCode A conventional HTTP status code:   * 401 - Authorization error with your API key or account   * 403 - Forbidden error with your API key or account   * 404 - The requested item does not exist   * 413 - Payload too large   * 422 - The query or body parameters did not pass validation   * 429 - Too many requests in a given amount of time   * 500 - An internal server error occurred, please contact support@centrify.com 
type FailureStatusCode int32

// List of failure_status_code
const (
	_401 FailureStatusCode = 401
	_403 FailureStatusCode = 403
	_404 FailureStatusCode = 404
	_413 FailureStatusCode = 413
	_422 FailureStatusCode = 422
	_429 FailureStatusCode = 429
	_500 FailureStatusCode = 500
)

func (v *FailureStatusCode) UnmarshalJSON(src []byte) error {
	var value int32
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := FailureStatusCode(value)
	for _, existing := range []FailureStatusCode{ 401, 403, 404, 413, 422, 429, 500,   } {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid FailureStatusCode", value)
}

// Ptr returns reference to failure_status_code value
func (v FailureStatusCode) Ptr() *FailureStatusCode {
	return &v
}

type NullableFailureStatusCode struct {
	value *FailureStatusCode
	isSet bool
}

func (v NullableFailureStatusCode) Get() *FailureStatusCode {
	return v.value
}

func (v *NullableFailureStatusCode) Set(val *FailureStatusCode) {
	v.value = val
	v.isSet = true
}

func (v NullableFailureStatusCode) IsSet() bool {
	return v.isSet
}

func (v *NullableFailureStatusCode) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFailureStatusCode(val *FailureStatusCode) *NullableFailureStatusCode {
	return &NullableFailureStatusCode{value: val, isSet: true}
}

func (v NullableFailureStatusCode) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFailureStatusCode) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

