/*
 * Centrify Vault REST API
 *
 * Vault REST API specification 
 *
 * API version: 1.0
 * Contact: support@centrify.com
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package secretinternal

import (
	"encoding/json"
)

// SecretPatchable struct for SecretPatchable
type SecretPatchable struct {
	Type Secrettypes `json:"type"`
	AdditionalProperties map[string]interface{}
}

type _SecretPatchable SecretPatchable

// NewSecretPatchable instantiates a new SecretPatchable object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSecretPatchable(type_ Secrettypes) *SecretPatchable {
	this := SecretPatchable{}
	this.Type = type_
	return &this
}

// NewSecretPatchableWithDefaults instantiates a new SecretPatchable object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSecretPatchableWithDefaults() *SecretPatchable {
	this := SecretPatchable{}
	return &this
}

// GetType returns the Type field value
func (o *SecretPatchable) GetType() Secrettypes {
	if o == nil {
		var ret Secrettypes
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *SecretPatchable) GetTypeOk() (*Secrettypes, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *SecretPatchable) SetType(v Secrettypes) {
	o.Type = v
}

func (o SecretPatchable) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["type"] = o.Type
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return json.Marshal(toSerialize)
}

func (o *SecretPatchable) UnmarshalJSON(bytes []byte) (err error) {
	varSecretPatchable := _SecretPatchable{}

	if err = json.Unmarshal(bytes, &varSecretPatchable); err == nil {
		*o = SecretPatchable(varSecretPatchable)
	}

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(bytes, &additionalProperties); err == nil {
		delete(additionalProperties, "type")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableSecretPatchable struct {
	value *SecretPatchable
	isSet bool
}

func (v NullableSecretPatchable) Get() *SecretPatchable {
	return v.value
}

func (v *NullableSecretPatchable) Set(val *SecretPatchable) {
	v.value = val
	v.isSet = true
}

func (v NullableSecretPatchable) IsSet() bool {
	return v.isSet
}

func (v *NullableSecretPatchable) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSecretPatchable(val *SecretPatchable) *NullableSecretPatchable {
	return &NullableSecretPatchable{value: val, isSet: true}
}

func (v NullableSecretPatchable) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSecretPatchable) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


