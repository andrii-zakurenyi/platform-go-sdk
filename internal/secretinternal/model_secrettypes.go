/*
 * Centrify Vault REST API
 *
 * Vault REST API specification 
 *
 * API version: 1.0
 * Contact: support@centrify.com
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package secretinternal

import (
	"encoding/json"
	"fmt"
)

// Secrettypes Secret type is immutable. After initially vaulting a secret its type cannot be changed.
type Secrettypes string

// List of secrettypes
const (
	TEXT Secrettypes = "text"
	KEYVALUE Secrettypes = "keyvalue"
	FOLDER Secrettypes = "folder"
)

func (v *Secrettypes) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := Secrettypes(value)
	for _, existing := range []Secrettypes{ "text", "keyvalue", "folder",   } {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid Secrettypes", value)
}

// Ptr returns reference to secrettypes value
func (v Secrettypes) Ptr() *Secrettypes {
	return &v
}

type NullableSecrettypes struct {
	value *Secrettypes
	isSet bool
}

func (v NullableSecrettypes) Get() *Secrettypes {
	return v.value
}

func (v *NullableSecrettypes) Set(val *Secrettypes) {
	v.value = val
	v.isSet = true
}

func (v NullableSecrettypes) IsSet() bool {
	return v.isSet
}

func (v *NullableSecrettypes) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSecrettypes(val *Secrettypes) *NullableSecrettypes {
	return &NullableSecrettypes{value: val, isSet: true}
}

func (v NullableSecrettypes) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSecrettypes) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

