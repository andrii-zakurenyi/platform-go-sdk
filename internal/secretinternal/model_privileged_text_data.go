/*
 * Centrify Vault REST API
 *
 * Vault REST API specification 
 *
 * API version: 1.0
 * Contact: support@centrify.com
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package secretinternal

import (
	"encoding/json"
	"reflect"
	"strings"
)

// PrivilegedTextData struct for PrivilegedTextData
type PrivilegedTextData struct {
	PrivilegedData
	// The privileged data in a text secret. Required for vault and modify operations.
	Data string `json:"data"`
	AdditionalProperties map[string]interface{}
}

type _PrivilegedTextData PrivilegedTextData

// NewPrivilegedTextData instantiates a new PrivilegedTextData object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPrivilegedTextData(data string, type_ Secrettypes) *PrivilegedTextData {
	this := PrivilegedTextData{}
	this.Type = type_
	this.Data = data
	return &this
}

// NewPrivilegedTextDataWithDefaults instantiates a new PrivilegedTextData object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPrivilegedTextDataWithDefaults() *PrivilegedTextData {
	this := PrivilegedTextData{}
	return &this
}

// GetData returns the Data field value
func (o *PrivilegedTextData) GetData() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Data
}

// GetDataOk returns a tuple with the Data field value
// and a boolean to check if the value has been set.
func (o *PrivilegedTextData) GetDataOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Data, true
}

// SetData sets field value
func (o *PrivilegedTextData) SetData(v string) {
	o.Data = v
}

func (o PrivilegedTextData) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	serializedPrivilegedData, errPrivilegedData := json.Marshal(o.PrivilegedData)
	if errPrivilegedData != nil {
		return []byte{}, errPrivilegedData
	}
	errPrivilegedData = json.Unmarshal([]byte(serializedPrivilegedData), &toSerialize)
	if errPrivilegedData != nil {
		return []byte{}, errPrivilegedData
	}
	if true {
		toSerialize["data"] = o.Data
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return json.Marshal(toSerialize)
}

func (o *PrivilegedTextData) UnmarshalJSON(bytes []byte) (err error) {
	type PrivilegedTextDataWithoutEmbeddedStruct struct {
		// The privileged data in a text secret. Required for vault and modify operations.
		Data string `json:"data"`
	}

	varPrivilegedTextDataWithoutEmbeddedStruct := PrivilegedTextDataWithoutEmbeddedStruct{}

	err = json.Unmarshal(bytes, &varPrivilegedTextDataWithoutEmbeddedStruct)
	if err == nil {
		varPrivilegedTextData := _PrivilegedTextData{}
		varPrivilegedTextData.Data = varPrivilegedTextDataWithoutEmbeddedStruct.Data
		*o = PrivilegedTextData(varPrivilegedTextData)
	} else {
		return err
	}

	varPrivilegedTextData := _PrivilegedTextData{}

	err = json.Unmarshal(bytes, &varPrivilegedTextData)
	if err == nil {
		o.PrivilegedData = varPrivilegedTextData.PrivilegedData
	} else {
		return err
	}

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(bytes, &additionalProperties); err == nil {
		delete(additionalProperties, "data")

		// remove fields from embedded structs
		reflectPrivilegedData := reflect.ValueOf(o.PrivilegedData)
		for i := 0; i < reflectPrivilegedData.Type().NumField(); i++ {
			t := reflectPrivilegedData.Type().Field(i)

			if jsonTag := t.Tag.Get("json"); jsonTag != "" {
				fieldName := ""
				if commaIdx := strings.Index(jsonTag, ","); commaIdx > 0 {
					fieldName = jsonTag[:commaIdx]
				} else {
					fieldName = jsonTag
				}
				if fieldName != "AdditionalProperties" {
					delete(additionalProperties, fieldName)
				}
			}
		}

		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullablePrivilegedTextData struct {
	value *PrivilegedTextData
	isSet bool
}

func (v NullablePrivilegedTextData) Get() *PrivilegedTextData {
	return v.value
}

func (v *NullablePrivilegedTextData) Set(val *PrivilegedTextData) {
	v.value = val
	v.isSet = true
}

func (v NullablePrivilegedTextData) IsSet() bool {
	return v.isSet
}

func (v *NullablePrivilegedTextData) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePrivilegedTextData(val *PrivilegedTextData) *NullablePrivilegedTextData {
	return &NullablePrivilegedTextData{value: val, isSet: true}
}

func (v NullablePrivilegedTextData) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePrivilegedTextData) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


