/*
 * Centrify Vault REST API
 *
 * Vault REST API specification 
 *
 * API version: 1.0
 * Contact: support@centrify.com
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package secretinternal

import (
	"encoding/json"
	"reflect"
	"strings"
)

// SecretDense struct for SecretDense
type SecretDense struct {
	SecretWritable
	Meta Metadata `json:"meta"`
	AdditionalProperties map[string]interface{}
}

type _SecretDense SecretDense

// NewSecretDense instantiates a new SecretDense object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSecretDense(meta Metadata, type_ Secrettypes, name string) *SecretDense {
	this := SecretDense{}
	this.Type = type_
	this.Name = name
	this.Meta = meta
	return &this
}

// NewSecretDenseWithDefaults instantiates a new SecretDense object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSecretDenseWithDefaults() *SecretDense {
	this := SecretDense{}
	return &this
}

// GetMeta returns the Meta field value
func (o *SecretDense) GetMeta() Metadata {
	if o == nil {
		var ret Metadata
		return ret
	}

	return o.Meta
}

// GetMetaOk returns a tuple with the Meta field value
// and a boolean to check if the value has been set.
func (o *SecretDense) GetMetaOk() (*Metadata, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Meta, true
}

// SetMeta sets field value
func (o *SecretDense) SetMeta(v Metadata) {
	o.Meta = v
}

func (o SecretDense) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	serializedSecretWritable, errSecretWritable := json.Marshal(o.SecretWritable)
	if errSecretWritable != nil {
		return []byte{}, errSecretWritable
	}
	errSecretWritable = json.Unmarshal([]byte(serializedSecretWritable), &toSerialize)
	if errSecretWritable != nil {
		return []byte{}, errSecretWritable
	}
	if true {
		toSerialize["meta"] = o.Meta
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return json.Marshal(toSerialize)
}

func (o *SecretDense) UnmarshalJSON(bytes []byte) (err error) {
	type SecretDenseWithoutEmbeddedStruct struct {
		Meta Metadata `json:"meta"`
	}

	varSecretDenseWithoutEmbeddedStruct := SecretDenseWithoutEmbeddedStruct{}

	err = json.Unmarshal(bytes, &varSecretDenseWithoutEmbeddedStruct)
	if err == nil {
		varSecretDense := _SecretDense{}
		varSecretDense.Meta = varSecretDenseWithoutEmbeddedStruct.Meta
		*o = SecretDense(varSecretDense)
	} else {
		return err
	}

	varSecretDense := _SecretDense{}

	err = json.Unmarshal(bytes, &varSecretDense)
	if err == nil {
		o.SecretWritable = varSecretDense.SecretWritable
	} else {
		return err
	}

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(bytes, &additionalProperties); err == nil {
		delete(additionalProperties, "meta")

		// remove fields from embedded structs
		reflectSecretWritable := reflect.ValueOf(o.SecretWritable)
		for i := 0; i < reflectSecretWritable.Type().NumField(); i++ {
			t := reflectSecretWritable.Type().Field(i)

			if jsonTag := t.Tag.Get("json"); jsonTag != "" {
				fieldName := ""
				if commaIdx := strings.Index(jsonTag, ","); commaIdx > 0 {
					fieldName = jsonTag[:commaIdx]
				} else {
					fieldName = jsonTag
				}
				if fieldName != "AdditionalProperties" {
					delete(additionalProperties, fieldName)
				}
			}
		}

		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableSecretDense struct {
	value *SecretDense
	isSet bool
}

func (v NullableSecretDense) Get() *SecretDense {
	return v.value
}

func (v *NullableSecretDense) Set(val *SecretDense) {
	v.value = val
	v.isSet = true
}

func (v NullableSecretDense) IsSet() bool {
	return v.isSet
}

func (v *NullableSecretDense) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSecretDense(val *SecretDense) *NullableSecretDense {
	return &NullableSecretDense{value: val, isSet: true}
}

func (v NullableSecretDense) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSecretDense) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


