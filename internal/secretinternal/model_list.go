/*
 * Centrify Vault REST API
 *
 * Vault REST API specification 
 *
 * API version: 1.0
 * Contact: support@centrify.com
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package secretinternal

import (
	"encoding/json"
)

// List Multiple items returned in order
type List struct {
	// What kind of resource does this list contain?
	Object string `json:"object"`
	// Url of next page of items in list.
	NextUrl NullableString `json:"next_url"`
	// Url of previous page of items in list.
	PreviousUrl NullableString `json:"previous_url"`
	AdditionalProperties map[string]interface{}
}

type _List List

// NewList instantiates a new List object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewList(object string, nextUrl NullableString, previousUrl NullableString) *List {
	this := List{}
	this.Object = object
	this.NextUrl = nextUrl
	this.PreviousUrl = previousUrl
	return &this
}

// NewListWithDefaults instantiates a new List object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewListWithDefaults() *List {
	this := List{}
	return &this
}

// GetObject returns the Object field value
func (o *List) GetObject() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Object
}

// GetObjectOk returns a tuple with the Object field value
// and a boolean to check if the value has been set.
func (o *List) GetObjectOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Object, true
}

// SetObject sets field value
func (o *List) SetObject(v string) {
	o.Object = v
}

// GetNextUrl returns the NextUrl field value
// If the value is explicit nil, the zero value for string will be returned
func (o *List) GetNextUrl() string {
	if o == nil || o.NextUrl.Get() == nil {
		var ret string
		return ret
	}

	return *o.NextUrl.Get()
}

// GetNextUrlOk returns a tuple with the NextUrl field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *List) GetNextUrlOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.NextUrl.Get(), o.NextUrl.IsSet()
}

// SetNextUrl sets field value
func (o *List) SetNextUrl(v string) {
	o.NextUrl.Set(&v)
}

// GetPreviousUrl returns the PreviousUrl field value
// If the value is explicit nil, the zero value for string will be returned
func (o *List) GetPreviousUrl() string {
	if o == nil || o.PreviousUrl.Get() == nil {
		var ret string
		return ret
	}

	return *o.PreviousUrl.Get()
}

// GetPreviousUrlOk returns a tuple with the PreviousUrl field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *List) GetPreviousUrlOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.PreviousUrl.Get(), o.PreviousUrl.IsSet()
}

// SetPreviousUrl sets field value
func (o *List) SetPreviousUrl(v string) {
	o.PreviousUrl.Set(&v)
}

func (o List) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["object"] = o.Object
	}
	if true {
		toSerialize["next_url"] = o.NextUrl.Get()
	}
	if true {
		toSerialize["previous_url"] = o.PreviousUrl.Get()
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return json.Marshal(toSerialize)
}

func (o *List) UnmarshalJSON(bytes []byte) (err error) {
	varList := _List{}

	if err = json.Unmarshal(bytes, &varList); err == nil {
		*o = List(varList)
	}

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(bytes, &additionalProperties); err == nil {
		delete(additionalProperties, "object")
		delete(additionalProperties, "next_url")
		delete(additionalProperties, "previous_url")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableList struct {
	value *List
	isSet bool
}

func (v NullableList) Get() *List {
	return v.value
}

func (v *NullableList) Set(val *List) {
	v.value = val
	v.isSet = true
}

func (v NullableList) IsSet() bool {
	return v.isSet
}

func (v *NullableList) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableList(val *List) *NullableList {
	return &NullableList{value: val, isSet: true}
}

func (v NullableList) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableList) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


